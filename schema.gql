# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

"""Newcase model"""
type Case {
  date: String!
  death: Float!
  healed: Float!
  new_entry_hospital: Float!
  new_entry_icu: Float!
}

input GraphPcrInputDep {
  day: Float
  department: String!
  month: Float!
  year: Float!
}

input GraphPcrInputReg {
  day: Float
  month: Float!
  region: Float!
  year: Float!
}

input GraphPositivityInput {
  day: Float
  department: String!
  month: Float!
  year: Float!
}

"""Hospitalization model"""
type Hospitalization {
  age: Float!
  conventional_care: Float!
  day: String!
  death: Float!
  different_care_services: Float!
  healed: Float!
  hospitalization: Float!
  icu: Float!
  other_care_district: Float!
  region: Float!
}

input HospitalizationInput {
  day: Float
  month: Float!
  region: Float!
  year: Float!
}

"""Data in ICU for a specific date"""
type Icu {
  day: String!
  rate: Float!
}

"""Collection of data in ICU"""
type IcuCollection {
  data: [Icu!]!
}

input IcuInput {
  day: Float
  month: Float!
  year: Float!
}

input NewCaseInput {
  day: Float
  department: String!
  month: Float!
  year: Float!
}

"""Pcr case result"""
type Pcr {
  age: Float!
  day: String!
  department: String
  pcrTestFemale: Float
  pcrTestMale: Float
  populationByDepartment: Float
  populationByRegion: Float
  positivePcrTestFemale: Float
  positivePcrTestMale: Float
  region: Float
  totalPcrTestDone: Float
  totalPositivePcrTest: Float
}

"""Positivity cases"""
type Positivity {
  day: String!
  department: String!
  infectionRate: Float!
  pcrPositive: Float!
  populationReference: Float!
}

"""Positivity cases weekly"""
type PositivityWeekly {
  rates: [Positivity!]!
  weekInfectionRate: Float!
}

type Query {
  getFranceIcuLevelForNonVaxx(data: IcuInput!): IcuCollection
  getFranceIcuLevelForVaxx(data: IcuInput!): IcuCollection
  getNewCaseByDepartment(data: NewCaseInput!): [Case!]
  getPcrTestMadeByDepartment(data: GraphPcrInputDep!): [Pcr!]
  getPcrTestMadeByRegion(data: GraphPcrInputReg!): [Pcr!]
  getPositivityByDepartmentPerDay(data: GraphPositivityInput!): [Positivity!]
  getPositivityByDepartmentPerWeek(data: GraphPositivityInput!): PositivityWeekly
  getStatusByRegion(data: HospitalizationInput!): [Hospitalization!]
}
